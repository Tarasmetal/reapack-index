#!/usr/bin/env ruby

Signal.trap('INT') { abort }

require 'reapack/index'

require 'git'
require 'io/console'

def confirm(question, &block)
  print "#{question} [y/N]"

  answer = STDIN.getch
  yes = answer.downcase == 'y'

  block[] if block_given? && yes

  puts

  yes
end

git = Git.open ARGV.first || Dir.pwd
db = ReaPack::Index.new File.join(git.dir.to_s, 'index.xml')

if git.current_branch != 'master'
  exit unless confirm("Current branch #{git.current_branch} is not" \
    " the master branch. Continue?")
end

commits = nil
if db.commit
  commits = git.log(999999).between db.commit
else
  commits = git.log 999999
end

commits.reverse_each {|commit|
  puts "Processing #{commit.message.lines.first.chomp} (#{commit.sha[0..6]})..."

  parent = commit.parent

  # initial commit
  unless parent
    commit.gtree.files.each_pair {|path, blob|
      next unless ReaPack::Index.type_of path

      puts "-> indexing new file #{path}"
      db.scan path, blob.contents
    }
    next
  end

  Git::Diff.new(git, commit.parent.sha, commit.sha).each {|diff|
    next unless ReaPack::Index.type_of diff.path

    puts "-> indexing #{diff.type} file #{diff.path}"

    if diff.type == 'deleted'
      db.delete diff.path
    else
      db.scan diff.path, diff.blob.contents
    end
  }
}
